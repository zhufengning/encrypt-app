import { dealFileBlock } from "../utils.mjs";

const MIX_C = [[0x2, 0x3, 0x1, 0x1], [0x1, 0x2, 0x3, 0x1], [0x1, 0x1, 0x2, 0x3], [0x3, 0x1, 0x1, 0x2]];
const I_MIXC = [[0xe, 0xb, 0xd, 0x9], [0x9, 0xe, 0xb, 0xd], [0xd, 0x9, 0xe, 0xb], [0xb, 0xd, 0x9, 0xe]];
const RCon = [0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000, 0x20000000, 0x40000000, 0x80000000, 0x1B000000, 0x36000000];

const S_BOX = [[0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76],
[0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0],
[0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15],
[0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75],
[0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84],
[0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF],
[0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8],
[0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2],
[0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73],
[0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB],
[0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79],
[0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08],
[0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A],
[0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E],
[0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF],
[0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]];

const I_SBOX = [[0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB],
[0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB],
[0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E],
[0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25],
[0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92],
[0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84],
[0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06],
[0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B],
[0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73],
[0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E],
[0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B],
[0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4],
[0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F],
[0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF],
[0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61],
[0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D]];


//轮密钥加
function addRoundKey(state, expandedKey, round) {
    // console.log(state);
    let key = new Uint8Array(expandedKey.buffer);
    for (let i = 0; i < 16; i++) {
        state[i] ^= key[i + round * 16];
    }
}

//字循环
function rotWord(word) {
    const byte1 = (word >>> 24) & 0xff;
    const bytes234 = word & 0x00ffffff;
    return ((bytes234 << 8) | byte1) >>> 0;//>>> 0转为无符号整数
}

//字节代换
function subWord(word) {
    let result = 0;
    for (let position = 0; position < 4; position++) {
        const i = (word >>> (position * 8 + 4)) & 0xf;
        const j = (word >>> (position * 8)) & 0xf;
        result ^= S_BOX[i][j] << (position * 8);
    }
    return result >>> 0;
}

// 辅助函数，用于反转字节序
function swapEndian(value) {
    return ((value & 0xFF) << 24) | ((value & 0xFF00) << 8) | ((value >> 8) & 0xFF00) | ((value >> 24) & 0xFF);
}

//拓展密钥
function keyExpansion(key) {
    const keyWords = new Uint32Array(key);

    const expandedKey = new Uint32Array(44);

    for (let i = 0; i < 4; i++) {
        expandedKey[i] = swapEndian(keyWords[i]);//小端序转为大端序
    }

    for (let i = 4; i < 44; i++) {
        let temp = expandedKey[i - 1];
        if (i % 4 === 0) {
            temp = (subWord(rotWord(temp)) ^ RCon[i / 4 - 1]) >>> 0;//轮常量异或
        }

        expandedKey[i] = expandedKey[i - 4] ^ temp;

    }

    return expandedKey;
}

//字节代替
function subBytes(state) {
    for (let i = 0; i < state.length; i++) {
        state[i] = S_BOX[state[i] >>> 4][state[i] & 0x0F];
    }
}

//行移位
function shiftRows(S) {
    let arr = [
        S[0], S[5], S[10], S[15],
        S[4], S[9], S[14], S[3],
        S[8], S[13], S[2], S[7],
        S[12], S[1], S[6], S[11]
    ];
    for (let i = 0; i < 16; i++) {
        S[i] = arr[i];
    }
}

function mod(poly, mod = 0b100011011) {
    // poly模多项式mod
    while (poly.toString(2).length > 8) {
        poly ^= mod << (poly.toString(2).length - 9);
    }
    return poly;
}

function mul(poly1, poly2) {
    // 多项式相乘
    let result = 0;
    for (let index = 0; index < poly2.toString(2).length; index++) {
        if (poly2 & (1 << index)) {
            result ^= poly1 << index;
        }
    }
    return result;
}

function Matrix_Mul(M1, M2) {
    // 用于列混合的矩阵相乘
    let M = new Uint16Array(16);//太小会溢位
    for (let row = 0; row < 4; row++) {
        for (let col = 0; col < 4; col++) {
            for (let Round = 0; Round < 4; Round++) {
                M[row + col * 4] ^= mul(M1[row][Round], M2[Round + col * 4]);
            }

            M[row + col * 4] = mod(M[row + col * 4]);
        }
    }
    return M;
}

// 列混合
function mixColumns(State) {
    return Matrix_Mul(MIX_C, State);
}


export function aesEncrypt(data, key) {
    let dataBytes = new Uint8Array(data);
    let expandedKey = keyExpansion(key);

    for (let i = 0; i < 44; i++) {
        expandedKey[i] = swapEndian(expandedKey[i]);
    }

    addRoundKey(dataBytes, expandedKey, 0);

    for (let round = 1; round < 10; round++) {
        subBytes(dataBytes);
        shiftRows(dataBytes);
        dataBytes = mixColumns(dataBytes);
        addRoundKey(dataBytes, expandedKey, round);
    }

    subBytes(dataBytes);
    shiftRows(dataBytes);
    addRoundKey(dataBytes, expandedKey, 10);


    return dataBytes;
}

function invShiftRows(S) {
    let arr = [
        S[0], S[13], S[10], S[7],
        S[4], S[1], S[14], S[11],
        S[8], S[5], S[2], S[15],
        S[12], S[9], S[6], S[3]
    ];
    for (let i = 0; i < 16; i++) {
        S[i] = arr[i];
    }
}

function invSubBytes(state) {
    for (let i = 0; i < state.length; i++) {
        state[i] = I_SBOX[state[i] >>> 4][state[i] & 0x0F];
    }
}

// 逆列混合
function invMixColumns(State) {
    return Matrix_Mul(I_MIXC, State);
}

export function aesDecrypt(data, key) {
    let dataBytes = new Uint8Array(data);
    let expandedKey = keyExpansion(key);

    for (let i = 0; i < 44; i++) {
        expandedKey[i] = swapEndian(expandedKey[i]);
    }
    addRoundKey(dataBytes, expandedKey, 10);

    for (let round = 9; round > 0; round--) {
        invShiftRows(dataBytes);
        invSubBytes(dataBytes);
        addRoundKey(dataBytes, expandedKey, round);
        dataBytes = invMixColumns(dataBytes);
    }

    invShiftRows(dataBytes);
    invSubBytes(dataBytes);
    addRoundKey(dataBytes, expandedKey, 0);


    return dataBytes;
}



// // 使用示例
// const key = new Uint8Array([0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF]);
// const inputData = new Uint8Array([0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF]);

// const dataHex = Array.from(new Uint32Array(inputData))
//     .map(byte => byte.toString(16).padStart(2, '0'))
//     .join('');
// console.log(dataHex);

// const encryptedData = aesEncrypt(inputData, key.buffer);
// const enHex = Array.from(encryptedData)
//     .map(byte => byte.toString(16).padStart(2, '0'))
//     .join('');
// console.log(enHex);

// const decryptedData = aesDecrypt(encryptedData, key.buffer);
// const deHex = Array.from(decryptedData)
//     .map(byte => byte.toString(16).padStart(2, '0'))
//     .join('');
// console.log(deHex);

// dealFileBlock("README.md","endata.txt",32,aesEncrypt,key);
// dealFileBlock("endata.txt","dedata.txt",32,aesDecrypt,key);